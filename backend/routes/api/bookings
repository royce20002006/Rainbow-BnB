// imports
const express = require('express');
const { requireAuth } = require('../../utils/auth');
const { Spot, User, Review, SpotImage, Booking
} = require('../../db/models');

const { check } = require('express-validator');
const { handleValidationErrors } = require('../../utils/validation');
const { Op, Model, ValidationError } = require('sequelize');
const booking = require('../../db/models/booking');
// set up the express router
const router = express.Router();

// get all bookings for current user
router.get('/current',requireAuth, async(req, res, next) => {
    try {
        const { user } = req;
        if (user) {
            const bookings = await Booking.findAll({
                where: {
                    userId: user.id,
                }
                
            });
            if (bookings) {
                let bookingFormat = [];
                for (let booking of bookings) {
                    let previewImageUrl = '';
            
                    const spots = await booking.getSpot();
                    const images = await spots.getSpotImages();
                    for (let image of images) {
                        
                        if (image.preview === true) {
                            previewImageUrl += image.url
                        }
                    }
                    let spot = {
                        id: spots.id,
                        ownerId: spots.ownerId,
                        address: spots.address,
                        city: spots.city,
                        state: spots.state,
                        country: spots.country,
                        lat: spots.lat,
                        lng: spots.lng,
                        name: spots.name,
                        price: spots.price,
                        previewImage: previewImageUrl
                    }
            
                    bookingFormat.push(
                        {
                            id: booking.id,
                            spotId: booking.spotId,
                            Spot: spot,
                            userId: booking.userId,
                            startDate: booking.startDate,
                            endDate: booking.endDate,
                            createdAt: booking.createdAt,
                            updatedAt: booking.updatedAt
                        }
                    );
                    
                    
                    
                    
                    
                    
                }
                res.json({Bookings: bookingFormat})
            }
        }
        
    } catch (error) {
        next(error);
    }
})

module.exports = router;